create_table:
  cards: >-
    CREATE TABLE IF NOT EXISTS cards (
        id_card INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
        title TEXT,
        description TEXT,
        familly VARCHAR(64),
        attack INT,
        defense INT
    )
  versions: >-
    CREATE TABLE IF NOT EXISTS versions (
      id_version INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      id_card INT UNSIGNED,
      rendering VARCHAR(64),
      rating INT,
      print_run INT,
      FOREIGN KEY (id_card) REFERENCES cards(id_card)
    )
  players: >-
    CREATE TABLE IF NOT EXISTS players (
      pseudo VARCHAR(64) PRIMARY KEY,
      player_name VARCHAR(64),
      player_first_name VARCHAR(64)
    )
  possessions: >-
    CREATE TABLE IF NOT EXISTS possessions (
      id_possession INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      pseudo VARCHAR(64),
      id_version INT UNSIGNED,
      purchase_date DATE,
      purchase_mode VARCHAR(64),
      sale_date DATE,
      sale_price INT,
      state INT,
      FOREIGN KEY (pseudo) REFERENCES players(pseudo),
      FOREIGN KEY (id_version) REFERENCES versions(id_version)
    )
  decks: >-
    CREATE TABLE IF NOT EXISTS decks (
      id_deck INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      deck_name VARCHAR(64),
      pseudo VARCHAR(64),
      FOREIGN KEY (pseudo) REFERENCES players(pseudo)
    )
  memberships: >-
    CREATE TABLE IF NOT EXISTS memberships (
      id_possession INT UNSIGNED,
      id_deck INT UNSIGNED,
      CONSTRAINT membership_pk PRIMARY KEY (id_possession, id_deck),
      FOREIGN KEY (id_possession) REFERENCES possessions(id_possession),
      FOREIGN KEY (id_deck) REFERENCES decks(id_deck)
    )
  games: >-
    CREATE TABLE IF NOT EXISTS games (
      id_game INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      game_date DATE,
      game_location VARCHAR(64),
      tournament_type VARCHAR(64),
      game_results VARCHAR(64),
      FOREIGN KEY (game_results) REFERENCES players(pseudo)
    )
  plays: >-
    CREATE TABLE IF NOT EXISTS plays (
      id_game INT UNSIGNED,
      id_deck INT UNSIGNED,
      pseudo VARCHAR(64),
      FOREIGN KEY (id_game) REFERENCES games(id_game),
      FOREIGN KEY (id_deck) REFERENCES decks(id_deck),
      FOREIGN KEY (pseudo) REFERENCES players(pseudo),
      PRIMARY KEY (id_game, id_deck, pseudo)
    )

drop_table:
  jeu: "DROP TABLE IF EXISTS plays"
  games: "DROP TABLE IF EXISTS games"
  memberships: "DROP TABLE IF EXISTS memberships"
  decks: "DROP TABLE IF EXISTS decks"
  possessions: "DROP TABLE IF EXISTS possessions"
  joueurs: "DROP TABLE IF EXISTS players"
  versions: "DROP TABLE IF EXISTS versions"
  cards: "DROP TABLE IF EXISTS cards"

add:
  player: >-
    INSERT INTO players (pseudo, player_name, player_first_name) VALUES (%s,%s,%s)
  deck: >-
    INSERT INTO decks(
      deck_name,
      pseudo
     ) VALUES(%s, %s)
  card: >-
    INSERT INTO cards(
      title,
      description,
      familly,
      attack,
      defense
    ) VALUES(%s, %s, %s, %s, %s)
  version: >-
    INSERT INTO versions(
      id_card,
      rendering,
      rating,
      print_run
    ) VALUES(%s, %s, %s, %s)
  possession: >-
    INSERT INTO possessions(
      pseudo,
      id_version,
      purchase_date,
      purchase_mode,
      sale_date,
      sale_price,
      state
    ) VALUES(%s, %s, %s, %s, %s, %s, %s)
  play: >-
    INSERT INTO plays(
    id_game,
    id_deck,
    pseudo
    ) VALUES(%s, %s, %s)
  game: >-
    INSERT INTO games(
      game_date,
      game_location,
      tournament_type,
      game_results
    ) VALUES(%s, %s, %s, %s)

remove:
  player: >-
    DELETE FROM players WHERE pseudo = %s;
  deck: >-
    DELETE FROM `decks` WHERE `deck_name`= %s;
  card: >-
    DELETE FROM `cards` WHERE `id_card`= %s;
  version: >-
    DELETE FROM `versions` WHERE `id_version`= %s;
  possession: >-
    DELETE FROM `possessions` WHERE `id_possession`= %s;
  play: >-
    DELETE FROM `plays` WHERE `id_play`= %s;
  game: >-
    DELETE FROM `games` WHERE `id_game`= %s;

consultation: 
  cards_by_type: >-
    SELECT * FROM `cards` WHERE `familly` = %s;
  cards_in_possession: >-
    SELECT DISTINCT `title`, `familly`, `attack`, `defense`, `rendering`, `print_run`, `rating` FROM (`cards` NATURAL JOIN `versions`) NATURAL JOIN `possessions` ;
  cards_not_in_deck: >-
    SELECT DISTINCT `title`, `familly`, `attack`, `defense`, `rendering`, `print_run`, `rating` FROM (`cards` NATURAL JOIN `versions`) WHERE versions.id_version NOT IN
    (SELECT DISTINCT versions.id_version FROM (`cards` NATURAL JOIN `versions`) NATURAL JOIN `possessions`);
  players_collector: >-
    SELECT DISTINCT `pseudo` FROM `players` WHERE players.pseudo NOT IN (SELECT `pseudo` FROM `plays`);